# Name of the stack that will be created in AWS CloudFront
service: big-eye-muii-project

package:
  # Files to be excluded (everything but functions)
  patterns:
    - '!./**'
    - functions/**

custom:
  # AWS Region (Nort Virginia)
  region: us-east-1
  # Prefix to name our resources
  prefix: big-eye-muii-backend
  # DynamoDB table that will store access log and user info
  accessLogTable: ${self:custom.prefix}-access-log
  # Bucket on which the faces will be stored
  faceBucket: ${self:custom.prefix}-face-bucket
  # Users thumbnail bucket
  thumbnailBucket: ${self:custom.prefix}-thumbnail-bucket
  # Face colletions
  faceCollection: ${self:custom.prefix}-face-collection

provider:
  name: aws
  # API Gateway type
  endpointType: regional
  # Lambda runtime configuration
  runtime: python3.8
  stage: dev
  region: ${self:custom.region}
  # Lambda timeout to stop execution
  timeout: 30
  # Lambda max memory usage
  memorySize: 128
  # Environment variables for lambda usage
  environment:
    REGION_NAME: ${self:custom.region}
    ACCESS_LOG_TABLE: ${self:custom.accessLogTable}
    FACE_BUCKET: ${self:custom.faceBucket}
    THUMBNAIL_BUCKET: ${self:custom.thumbnailBucket}
    FACE_COLLECTION: ${self:custom.faceCollection}
  lambdaHashingVersion: 20201221
  # Lambda permissions
  iam:
    role:
      statements:
        # Allow to get from S3 and Get, query, put and delete from DynamoDB
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource:
            - arn:aws:s3:::${self:custom.faceBucket}/*
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource:
            - arn:aws:s3:::${self:custom.thumbnailBucket}/*
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.accessLogTable}
        - Effect: Allow
          Action: 
            - rekognition:SearchFacesByImage
            - rekognition:ListCollections
            - rekognition:IndexFaces
          Resource:
            - "*"

functions:
  # FaceMatch function: execute when upload image (face[.]*.png) to S3
  faceMatch:
    handler: functions/faceMatch.lambda_handler
    events:
      # When specified S3 events, theres no need to explicit create the bucket event at resources
      - s3:
          bucket: ${self:custom.faceBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: face
            - suffix: .png
  getUsers:
    handler: functions/getUsers.lambda_handler
    events:
      - http:
          path: users
          method: get
          cors: true
  registerUser:
    handler: functions/registerUser.lambda_handler
    layers:
      - arn:aws:lambda:us-east-1:874093745621:layer:sverdejot-pillow:3	
    events:
      - http:
          path: users
          method: post
          cors: true


# Create extra resources
resources:
  Resources:
    # DynamoDB table
    AccessLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.accessLogTable}
        AttributeDefinitions:
          - AttributeName: faceId
            AttributeType: S
        KeySchema:
          - AttributeName: faceId
            KeyType: HASH
        # Billing - On-demand
        BillingMode: PAY_PER_REQUEST
    ThumbnailBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.thumbnailBucket}