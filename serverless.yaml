# Name of the stack that will be created in AWS CloudFront
service: big-eye-muii-project-dev-test

package:
  # Files to be excluded (everything but functions)
  patterns:
    - '!./**'
    - backend/functions/**

custom:
  # AWS Region (Nort Virginia)
  region: us-east-1
  # Prefix to name our resources
  prefix: big-eye-muii-backend-dev-test
  # DynamoDB table that will store access log and user info
  accessLogTable: ${self:custom.prefix}-access-log
  # Users thumbnail bucket
  thumbnailBucket: ${self:custom.prefix}-thumbnail-bucket
  # Face colletions
  faceCollection: ${self:custom.prefix}-face-collection
  exportOutputs:
    output: 
      file: ./ProyectoAWS/angular/server-envinroment.json
      format: json
    include:
      - UserPoolId
      - UserPoolClientId
      - UsersApiEndpoint
      - Region

provider:
  name: aws
  # API Gateway type
  endpointType: regional
  # Lambda runtime configuration
  runtime: python3.8
  stage: dev
  region: ${self:custom.region}
  # Lambda timeout to stop execution
  timeout: 30
  # Lambda max memory usage
  memorySize: 128
  # Environment variables for lambda usage
  environment:
    REGION_NAME: ${self:custom.region}
    ACCESS_LOG_TABLE: ${self:custom.accessLogTable}
    THUMBNAIL_BUCKET: ${self:custom.thumbnailBucket}
    FACE_COLLECTION: ${self:custom.faceCollection}
  lambdaHashingVersion: 20201221
  # Lambda permissions
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${self:custom.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient
  iam:
    role:
      statements:
        # Allow to get from S3 and Get, query, put and delete from DynamoDB
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - arn:aws:s3:::${self:custom.thumbnailBucket}/*
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.accessLogTable}
        - Effect: Allow
          Action: 
            - rekognition:SearchFacesByImage
            - rekognition:ListCollections
            - rekognition:IndexFaces
          Resource:
            - "*"

functions:
  # FaceMatch function (compares face with collection): POST requests to /access
  faceMatch:
    handler: backend/functions/faceMatch.lambda_handler
    events:
      - http:
          path: access
          method: POST
          cors: true
  # GetUsers function (list all users' info): GET requests to /users
  getUsers:
    handler: backend/functions/getUsers.lambda_handler
    events:
      - httpApi:
          path: /users
          method: GET
          authorizer: serviceAuthorizer
  # RegisterUser funtion (register username and thumbnail): POST requests to /users
  registerUser:
    handler: backend/functions/registerUser.lambda_handler
    layers:
      # Pillow library layer
      - arn:aws:lambda:us-east-1:874093745621:layer:sverdejot-pillow:3	
    events:
      - httpApi:
          path: /users
          method: POST
          authorizer: serviceAuthorizer

# Create extra resources
resources:
  Resources:
    # DynamoDB table
    AccessLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.accessLogTable}
        AttributeDefinitions:
          - AttributeName: faceId
            AttributeType: S
        KeySchema:
          - AttributeName: faceId
            KeyType: HASH
        # Billing - On-demand
        BillingMode: PAY_PER_REQUEST
    ThumbnailBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.thumbnailBucket}
    HttpApi:
      Type: AWS::ApiGatewayV2::Api
      DependsOn: serviceUserPool
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: service-user-pool-${self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: service-user-pool-client-${self:provider.stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs: 
          - https://localhost:4200
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders: 
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: 
          Ref: serviceUserPool
        Domain: service-user-pool-domain-${self:provider.stage}-${self:custom.prefix}
  Outputs:
    UserPoolId:
      Value:
        Ref: serviceUserPool
      Export:
        Name: ${self:provider.stage}-poolId
    UserPoolClientId:
      Value:
        Ref: serviceUserPoolClient
      Export:
        Name: ${self:provider.stage}-clientId
    UsersApiEndpoint:
      Value:
        Fn::Join:
        - ""
        - - "https://"
          - Ref: HttpApi
          - ".execute-api."
          - ${self:provider.region}.
          - Ref: "AWS::URLSuffix"
          - "/users"
      Export:
        Name: ${self:provider.stage}-userApi
    Region:
      Value:
        Ref: ${self:custom.region}
      Export:
        Name: ${self:custom.prefix}-region

plugins:
  - serverless-export-outputs